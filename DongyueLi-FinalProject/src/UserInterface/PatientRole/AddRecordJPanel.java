/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.Patient.Record;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientDoctorWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author dongyueli
 */
public class AddRecordJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;    
    private EcoSystem ecoSystem;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private PatientOrganization patientOrganization;
    private Patient patient;
    /**
     * Creates new form AddVitalSignsJPanel
     */
    public AddRecordJPanel(JPanel userProcessContainer,UserAccount userAccount, PatientOrganization patientOrganization, Enterprise enterprise,EcoSystem ecoSyste) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecoSystem;
        this.userAccount = userAccount;
        this.patientOrganization = (PatientOrganization)patientOrganization;
        this.enterprise = enterprise;
        this.patient=userAccount.getPatient();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        systolicBloodPressureJTextField = new javax.swing.JTextField();
        weightInPoundsJTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        respiratoryRateJTextField = new javax.swing.JTextField();
        heartRateJTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        addJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        standTimeJTextField = new javax.swing.JTextField();
        moveTimeJTextField = new javax.swing.JTextField();
        excerciseTimeJTextField = new javax.swing.JTextField();
        totalTimeJTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(systolicBloodPressureJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 187, 159, -1));
        add(weightInPoundsJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 225, 159, -1));

        jLabel8.setText("Respiratory rate");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 104, -1, -1));

        jLabel9.setText("Heart rate");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 148, -1, -1));

        jLabel10.setText("Systolic blood pressure");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 192, -1, -1));

        jLabel11.setText("Weight in pounds");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, -1, -1));

        respiratoryRateJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respiratoryRateJTextFieldActionPerformed(evt);
            }
        });
        add(respiratoryRateJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 99, 159, -1));
        add(heartRateJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 143, 159, -1));

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 3, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 51, 204));
        jLabel12.setText("Add Vital Signs and Fitness Record");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 33, 445, -1));

        addJButton.setText("Add Record ");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });
        add(addJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 280, -1, -1));

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 310, -1, -1));

        jLabel13.setText("Total Time (mins)");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(413, 230, -1, -1));

        standTimeJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standTimeJTextFieldActionPerformed(evt);
            }
        });
        add(standTimeJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 99, 159, -1));
        add(moveTimeJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 143, 159, -1));
        add(excerciseTimeJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 187, 159, -1));

        totalTimeJTextField.setEditable(false);
        totalTimeJTextField.setEnabled(false);
        add(totalTimeJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 225, 159, -1));

        jLabel15.setText("Stand Time (mins)");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(413, 104, -1, -1));

        jLabel16.setText("Move Time (mins)");
        add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(413, 148, -1, -1));

        jLabel17.setText("Excercise Time (mins)");
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(413, 187, -1, 26));
    }// </editor-fold>//GEN-END:initComponents

    private void respiratoryRateJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respiratoryRateJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_respiratoryRateJTextFieldActionPerformed

    private void standTimeJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standTimeJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_standTimeJTextFieldActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
        // TODO add your handling code here:
        try{
            float respiratoryRate = Float.parseFloat(respiratoryRateJTextField.getText());
            float heartRate = Float.parseFloat(heartRateJTextField.getText());
            float systolicBloodPressure = Float.parseFloat(systolicBloodPressureJTextField.getText());
            float weightInPounds = Float.parseFloat(weightInPoundsJTextField.getText());
            int standTime = Integer.parseInt(standTimeJTextField.getText());
            int moveTime= Integer.parseInt(moveTimeJTextField.getText());
            int excerciseTimet = Integer.parseInt(excerciseTimeJTextField.getText());
            //int totalTime = Integer.parseInt(totalTimeJTextField.getText());
            
                    
            Date date = new Date();
            Boolean normalOrNot = false;
            Boolean needMoreExcerciseOrNot = false;
            int age = patient.getAge();
            
            int totalTime =  moveTime+excerciseTimet+standTime;

            Record vs = patient.getRecordHistory().addRecord();
            vs.setRespiratoryRate(respiratoryRate);
            vs.setHeartRate(heartRate);
            vs.setSystolicBloodPressure(systolicBloodPressure);
            vs.setWeightInPounds(weightInPounds);
            vs.setMoveTime(moveTime);
            vs.setStandTime(standTime);
            vs.setExcerciseTime(excerciseTimet);
            vs.setTotalTime(totalTime);
            vs.setDate(date);


            
            for(Organization o :enterprise.getOrganizationDirectory().getOrganizationList()){
                if(o instanceof DoctorOrganization){
                    DoctorOrganization dO =(DoctorOrganization)o;
                        PatientDoctorWorkRequest request = new PatientDoctorWorkRequest();
                        request.setDate();
                        request.setRecord(vs);                        
                        dO.getWorkQueue().getWorkRequestList().add(request);
                        userAccount.getWorkQueue().getWorkRequestList().add(request);                                 
                }
            }
            
            
            if(age>=1&&age<=3)
            {
                if((respiratoryRate>=20 && respiratoryRate<=30)&&(heartRate>=80 && heartRate<=130)&&(systolicBloodPressure>=80 && systolicBloodPressure<=110)&&(weightInPounds>=22 && weightInPounds<=31))
                {
                    normalOrNot = true;
                }
                else
                {
                    normalOrNot = false;
                }
            }
            if(age>=4&&age<=5)
            {
                if((respiratoryRate>=20 && respiratoryRate<=30)&&(heartRate>=80 && heartRate<=120)&&(systolicBloodPressure>=80 && systolicBloodPressure<=110)&&(weightInPounds>=31 && weightInPounds<=40))
                {
                    normalOrNot = true;
                }
                else
                {
                    normalOrNot = false;
                }
            }
            if(age>=6&&age<=12)
            {
                if((respiratoryRate>=20 && respiratoryRate<=30)&&(heartRate>=70 && heartRate<=110)&&(systolicBloodPressure>=80 && systolicBloodPressure<=120)&&(weightInPounds>=41 && weightInPounds<=92))
                {
                    normalOrNot = true;
                }
                else
                {
                    normalOrNot = false;
                }
            }
            if(age>=13)
            {
                if((respiratoryRate>=12 && respiratoryRate<=20)&&(heartRate>=55 && heartRate<=105)&&(systolicBloodPressure>=110 && systolicBloodPressure<=120)&&(weightInPounds>110))
                {
                    normalOrNot = true;
                }
                else
                {
                    normalOrNot = false;
                }
            }
            
            if(totalTime<=120){
                needMoreExcerciseOrNot = true;
            }
            else{
                needMoreExcerciseOrNot = false;
            }

            if(normalOrNot == true)
            {
                vs.setNormalOrNot("Normal");
            }
            else{
                vs.setNormalOrNot("Abnormal");
            }
            
            if(needMoreExcerciseOrNot == true)
            {
                vs.setNeedMoreExcerciseOrNot("Need More Excercise");
            }
            else{
                vs.setNeedMoreExcerciseOrNot("Reach the Standard");
            }
            

            

                       
            JOptionPane.showMessageDialog(null, "Add Record Information Successfully!", "Warning", JOptionPane.WARNING_MESSAGE);
            resetFields();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Alert! Please enter appropriate values! ", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_addJButtonActionPerformed
//
//    private String NormalOrNot(int age, Record record) {
//        String normalOrNot = "Normal";
//        
//        float respiratoryRate = record.getRespiratoryRate();
//        float heartRate = record.getHeartRate();
//        float systolicBloodPressure = record.getSystolicBloodPressure();
//        float weightInPounds = record.getWeightInPounds();
//
//            
//            if(age>=1&&age<=3)
//            {
//                if((respiratoryRate>=20 && respiratoryRate<=30)&&(heartRate>=80 && heartRate<=130)&&(systolicBloodPressure>=80 && systolicBloodPressure<=110)&&(weightInPounds>=22 && weightInPounds<=31))
//                {
//                    normalOrNot = "Normal";
//                }
//                else
//                {
//                    normalOrNot = "Abnormal";
//                }
//            }
//            if(age>=4&&age<=5)
//            {
//                if((respiratoryRate>=20 && respiratoryRate<=30)&&(heartRate>=80 && heartRate<=120)&&(systolicBloodPressure>=80 && systolicBloodPressure<=110)&&(weightInPounds>=31 && weightInPounds<=40))
//                {
//                    normalOrNot = "Normal";
//                }
//                else
//                {
//                    normalOrNot = "Abnormal";
//                }
//            }
//            if(age>=6&&age<=12)
//            {
//                if((respiratoryRate>=20 && respiratoryRate<=30)&&(heartRate>=70 && heartRate<=110)&&(systolicBloodPressure>=80 && systolicBloodPressure<=120)&&(weightInPounds>=41 && weightInPounds<=92))
//                {
//                    normalOrNot = "Normal";
//                }
//                else
//                {
//                    normalOrNot = "Abnormal";
//                }
//            }
//            if(age>=13)
//            {
//                if((respiratoryRate>=12 && respiratoryRate<=20)&&(heartRate>=55 && heartRate<=105)&&(systolicBloodPressure>=110 && systolicBloodPressure<=120)&&(weightInPounds>110))
//                {
//                    normalOrNot = "Normal";
//                }
//                else
//                {
//                    normalOrNot = "Abnormal";
//                }
//            }
//            
//            return normalOrNot;
//    }
//    
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
//        userProcessContainer.remove(this);
//        Component[] componentArray = userProcessContainer.getComponents();
//        Component component = componentArray[componentArray.length - 1];
//        ManageMyVitalSignsAndFitnessRecordJPanel dwjp = (ManageMyVitalSignsAndFitnessRecordJPanel) component;
//        dwjp.populateTable();
//        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void resetFields() {
        respiratoryRateJTextField.setText("");
        heartRateJTextField.setText("");
        systolicBloodPressureJTextField.setText("");
        weightInPoundsJTextField.setText("");
        standTimeJTextField.setText("");
        moveTimeJTextField.setText("");
        excerciseTimeJTextField.setText("");
        totalTimeJTextField.setText("");       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JTextField excerciseTimeJTextField;
    private javax.swing.JTextField heartRateJTextField;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField moveTimeJTextField;
    private javax.swing.JTextField respiratoryRateJTextField;
    private javax.swing.JTextField standTimeJTextField;
    private javax.swing.JTextField systolicBloodPressureJTextField;
    private javax.swing.JTextField totalTimeJTextField;
    private javax.swing.JTextField weightInPoundsJTextField;
    // End of variables declaration//GEN-END:variables
}
